package com.patrones.software.creacionales.builder;

public class Usuario {

	// regla de negocio: Nombre y apellido es requerido para crear un usuario
	private String username;
	private String contrasena;

	// regla de negocio: Si el medio de contacto tiene un valor verdadero
		// el cliente podra asignar valores para mail, telefono y direcion
		// si el medio de contacto es falso no se habilitaran lo setters de los
		// atributos
	
	private boolean medioContacto; // opcional

	
	/*
	 * 
	 */
	
	

	private String nombre;
	private String apellido;
	private String email;
	private String telefono;
	private String direccion;

	public boolean getMedioContacto() {
		return medioContacto;
	}

	public BuilderUsuario setMedioContacto(boolean medioContacto) {
		if(!medioContacto) {
			throw new IllegalArgumentException("NO es posible asignar un valor falso a medio de contacto");
		}
						
		this.medioContacto = medioContacto;
		return new BuilderUsuario(this);
	}

	public String getNombre() {
		return nombre;
	}

	public Usuario setNombre(String nombre) {
		this.nombre = nombre;
		return this;
	}

	public String getApellido() {
		return apellido;
	}

	public Usuario setApellido(String apellido) {
		this.apellido = apellido;
		return this;
	}

	

	private Usuario(String username, String contrasena) {
		this.username = username;
		this.contrasena = contrasena;
		this.medioContacto = false;
	}

	public static Usuario crearUsuario(String username, String contrasena) {
		return new Usuario(username, contrasena);
	}

	// ESTE METODO ES UN METODO DE INSTANCIA
	public Usuario build() {
		return this;

	}

	@Override
	public String toString() {
		return "Usuario [username=" + username + ", contrasena=" + contrasena + ", nombre=" + nombre + ", apellido="
				+ apellido + ", email=" + email + ", telefono=" + telefono + ", direccion=" + direccion + "]";
	}

	// crear una nueva clase dentro de mi misma clase

	public static class BuilderUsuario {
		private Usuario usuario;

		public BuilderUsuario(Usuario usuario) {
			this.usuario = usuario;
		}
		
//		public String getEmail() {
//			return email;
//		}

		public BuilderUsuario setEmail(String email) {
			usuario.email = email;
			return this;
		}

//		public String getTelefono() {
//			return telefono;
//		}

		public BuilderUsuario setTelefono(String telefono) {
			usuario.telefono = telefono;
			return this;
		}

//		public String getDireccion() {
//			return direccion;
//		}

		public BuilderUsuario setDireccion(String direccion) {
			usuario.direccion = direccion;
			return this;
		}

		public Usuario build() {
			return usuario;
		}
	}

}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

package com.patrones.software.creacionales.builder;

public class Casa {

    // Atributos obligatorios
    private String direccion;
    private int numeroHabitaciones;

    // Atributos opcionales
    private boolean tieneJardin;
    private boolean tienePiscina;
    private boolean tieneGaraje;
    private boolean tieneCalefaccion;
    private boolean tieneFontaneria;
    private boolean tieneCableadoElectrico;

    // Constructor privado para los atributos obligatorios
    private Casa(String direccion, int numeroHabitaciones) {
        this.direccion = direccion;
        this.numeroHabitaciones = numeroHabitaciones;
        this.tieneJardin = false;
        this.tienePiscina = false;
        this.tieneGaraje = false;
        this.tieneCalefaccion = false;
        this.tieneFontaneria = false;
        this.tieneCableadoElectrico = false;
    }

    // Método estático para crear un objeto Casa
    public static Casa crearCasa(String direccion, int numeroHabitaciones) {
        return new Casa(direccion, numeroHabitaciones);
    }

    // Métodos getters
    public String getDireccion() {
        return direccion;
    }

    public int getNumeroHabitaciones() {
        return numeroHabitaciones;
    }

    public boolean isTieneJardin() {
        return tieneJardin;
    }

    public boolean isTienePiscina() {
        return tienePiscina;
    }

    public boolean isTieneGaraje() {
        return tieneGaraje;
    }

    public boolean isTieneCalefaccion() {
        return tieneCalefaccion;
    }

    public boolean isTieneFontaneria() {
        return tieneFontaneria;
    }

    public boolean isTieneCableadoElectrico() {
        return tieneCableadoElectrico;
    }

    // Método build para finalizar la construcción
    public Casa build() {
        return this;
    }

    @Override
    public String toString() {
        return "Casa [direccion=" + direccion + ", numeroHabitaciones=" + numeroHabitaciones 
                + ", tieneJardin=" + tieneJardin + ", tienePiscina=" + tienePiscina 
                + ", tieneGaraje=" + tieneGaraje + ", tieneCalefaccion=" + tieneCalefaccion 
                + ", tieneFontaneria=" + tieneFontaneria + ", tieneCableadoElectrico=" + tieneCableadoElectrico + "]";
    }

    // Clase interna BuilderCasa
    public static class BuilderCasa {
        private Casa casa;

        public BuilderCasa(Casa casa) {
            this.casa = casa;
        }

        public BuilderCasa setJardin(boolean tieneJardin) {
            casa.tieneJardin = tieneJardin;
            return this;
        }

        public BuilderCasa setPiscina(boolean tienePiscina) {
            casa.tienePiscina = tienePiscina;
            return this;
        }

        public BuilderCasa setGaraje(boolean tieneGaraje) {
            casa.tieneGaraje = tieneGaraje;
            return this;
        }

        public BuilderCasa setCalefaccion(boolean tieneCalefaccion) {
            casa.tieneCalefaccion = tieneCalefaccion;
            return this;
        }

        public BuilderCasa setFontaneria(boolean tieneFontaneria) {
            casa.tieneFontaneria = tieneFontaneria;
            return this;
        }

        public BuilderCasa setCableadoElectrico(boolean tieneCableadoElectrico) {
            casa.tieneCableadoElectrico = tieneCableadoElectrico;
            return this;
        }

        public Casa build() {
            return casa;
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Casa casa = Casa.crearCasa("Calle Falsa 123", 3)
                        .new BuilderCasa(Casa.crearCasa("Calle Falsa 123", 3))
                        .setJardin(true)
                        .setPiscina(true)
                        .setGaraje(true)
                        .setCalefaccion(true)
                        .setFontaneria(true)
                        .setCableadoElectrico(true)
                        .build();

        System.out.println(casa.toString());
    }
}






























